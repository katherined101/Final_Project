---
title: "qPCR Fold Change Analysis Using RQdeltaCT"
subtitle: "Intro to Reproducible Data Analysis Using R (CELL 6351) Final Project"
author: Katherine E. Dempsey
date: "July 24, 2025"
---

# Purpose

The goal of this project was to develop a well-documented script that streamlines the process of calculating and visualizing gene expression fold changes from raw qPCR datasets, entirely within R. For the purposes of this example, I will be showing qPCR data generated by a summer intern in my lab. The experiment is looking at the expression of polyamine synthesis genes in samples obtained from KPC mice treated with two different doses of pentamidine, which inhibits the *SAT1* gene.

## Workflow

[![Figure 1: Overview of workflow for RQdeltaCT package](RQdeltaCT_workflow.png)](https://cran.r-project.org/web/packages/RQdeltaCT/vignettes/my-vignette.html#:~:text=The%20presented%20RQdeltaCT%20package%20includes,basic%20programming%20skills%20are%20required)

## 0. Installing Package

You can view the technical details about this package on [CRAN](https://cran.r-project.org/web/packages/RQdeltaCT/index.html) or [GitHub](https://github.com/Donadelnal/RQdeltaCT). Then follow the steps below to install and load the `RQdeltaCT` package. Follow the steps below to install from the CRAN repository.

```{r}
#| eval: false

install.packages("RQdeltaCT")
```

Since you should already have already installed the `devtools` package for this class, you can also install `RQdeltaCT` directly from GitHub instead.

```{r}
#| eval: false

remotes::install_github("Donadelnal/RQdeltaCT")
```

Once you have installed `RQdeltaCT`, you can click [here](https://cran.r-project.org/web/packages/RQdeltaCT/RQdeltaCT.pdf) to learn more about what functions are included in this package.

## 1. Importing & Tidying Data

This package includes built-in `read_Ct_long()` and `read_Ct_wide()` functions for importing data, but these only recognize .csv and .txt files. However, most qPCR machines export results as an Excel spreadsheet (.xls, .xlsx). Below is a way to directly import specific sheets from Excel without having to create a separate file.

```{r}
#| eval: false

# The 'readxl' package allows you to open individual sheets from Excel without having to convert it into .csv or .txt format first

install.packages("readxl")
```

Your raw data file will probably look something like the following:

![**Figure 2:** Example of raw qPCR data results](raw_qPCR_data_screenshot.png)

As you can see, this data needs quite a bit of tidying.

The first step is to import the sheet titled "Raw Data" from the Excel file using the `readxl` package. I also excluded the first 47 rows of irrelevant information pertaining to the qPCR instrument and protocol.

```{r}
#| label: Importing Data
#| warning: false
#| message: false
#| error: false

# Load necessary packages

library(readxl)
library(tidyverse)
library(RQdeltaCT)

raw_data <- read_excel("qPCR_data.xls", sheet = "Results", skip = 47)

glimpse(raw_data)
```

Using `dplyr`, I selected only the columns required for calculations and filtered out rows containing the H2O no template controls.

```{r}
select_data <- raw_data |>
  select(`Sample Name`, `Target Name`, CT) |>
  filter(`Sample Name` != "H2O")

glimpse(select_data)
```

The `RQdeltaCT` package requires four columns of data: "Sample", "Group", "Gene", and "Ct". Therefore, it is necessary to re-name the column headings to ensure your data is recognized properly. I also had to add a "Group" column for grouping the biological replicates.

```{r}
clean_data <- select_data |>
  rename(Sample = `Sample Name`, Gene = `Target Name`, Ct = CT) |>
  mutate(Group = case_when(
    str_detect(Sample, "c") ~ "Control",
    str_detect(Sample, "5") ~ "5uM",
    str_detect(Sample, "10") ~ "10uM"))

glimpse(clean_data)
```

You can also play around with sample data that is included with the package.

```{r}

data(data.Ct)
str(data.Ct)
```

### 1a. Quality Control

First, let's generate a few quick graphs to help us visualize the proportion of unreliable Ct values by flagging values that were undetermined or above the set threshold.

```{r}
#| label: Quality Check

# Evaluate the quality of reads for each sample

sample_quality <- control_Ct_barplot_sample(data = clean_data,
                                            flag.Ct = "Undetermined", 
                                            maxCt = 35)
# View tibble
tibble(sample_quality[[2]])

# Evaluate the quality of reads for each gene

gene_quality <- control_Ct_barplot_gene(data = clean_data,
                                          flag.Ct = "Undetermined",
                                          maxCt = 35,
                                          axis.text.size = 6)
# View tibble
head(gene_quality[[2]])

```

Genes with consistently weak amplification can be an indicator of poor primer efficiency, meaning these primer pairs may need to be redesigned.

### 1b. Data Filtering

Next, let's filter out the genes that had at least 50% low quality reads.

```{r}

low_quality_genes <- filter(gene_quality[[2]], Not.reliable.fraction > 0.5)$Gene
low_quality_genes <- unique(as.vector(low_quality_genes))
low_quality_genes

# Exclude identified genes from data set for analysis

quality_data <- filter_Ct(data = clean_data,
                           remove.Gene = low_quality_genes)
```

Finally, we need to finish prepping data for analysis using the `make_Ct_ready()` function. Setting the argument `imput.by.mean.within.groups` to "TRUE" will collapse technical replicates by taking the average Ct values for each biological sample and remove any missing values.

```{r}

ready_data <- make_Ct_ready(data = quality_data,
                            imput.by.mean.within.groups = TRUE)

ready_data
```

## 2. Normalizing Data to Reference Gene (ΔCt)

If you are calculating 2^-dCt^, then set the `transform` argument to "TRUE". Otherwise, set it equal to "FALSE" if you are using the 2^-ddCt^ method.

```{r}

# ΔCt method
deltaCt_results <- delta_Ct(data = ready_data,
                            normalise = TRUE,
                            ref = "18s",
                            transform = TRUE)
deltaCt_results

# ΔΔCt method

deltaCt <- delta_Ct(data = ready_data,
                    normalise = TRUE,
                    ref = "18s",
                    transform = FALSE)
deltaCt
```

## 3. Relative Quantification (ΔΔCt)

The `RQ_ddCt()` function calculates the relative fold change values along with statistical significance (either Student's t test or Mann-Whitney U test is performed based on Shapiro-Wilk normality test). Therefore, the `RQ_ddCt()` function will need to be called for each group comparison you want to make, as specified by the `group.study` and `group.ref` arguments.

```{r}

# Sample size must be between 3 and 5000 for normality testing

ddCt_results_5uM <- RQ_ddCt(deltaCt,
                        group.study = "5uM",
                        group.ref = "Control",
                        do.tests = TRUE)
glimpse(ddCt_results_5uM)


ddCt_results_10uM <- RQ_ddCt(deltaCt,
                        group.study = "10uM",
                        group.ref = "Control",
                        do.tests = TRUE)
glimpse(ddCt_results_10uM)
```

## 4. Visualization

```{r}
#| warning: false
#| message: false
#| error: false

# Variant with p values depending on the normality of the data:
library(ggsignif)
library(cowplot)
```

### 4a. Fold Change Plot

```{r}

FC_plot_5uM <- FCh_plot(data = ddCt_results_5uM,
         use.p = TRUE,
         mode = "depends",
         p.threshold = 0.05,
         use.FCh = TRUE,
         signif.show = FALSE,
         angle = 45,
         colors = c("salmon", "royalblue"))

FC_plot_10uM <- FCh_plot(data = ddCt_results_10uM,
         use.p = TRUE,
         mode = "depends",
         p.threshold = 0.05,
         use.FCh = TRUE,
         signif.show = FALSE,
         angle = 45,
         colors = c("salmon", "royalblue"))

# Store calculations in data frame

FC_table_5uM <- as.data.frame(FC_plot_5uM[2])
FC_table_10uM <- as.data.frame(FC_plot_10uM[2])

# Select values to view

FC_table_5uM |>
  select(Gene, ddCt, FCh, log10FCh, p.used)
FC_table_10uM |>
  select(Gene, ddCt, FCh, log10FCh, p.used)

```

When you are evaluating a big group of genes, fold change plots can be useful for quickly telling which ones have upregulated vs downregulated expression. Here is an example from another one of my datasets with more genes.

![**Figure 3:** Another fold change plot example](images/clipboard-2793993996.png)

### 4b. Box Plot

```{r}

# Use ready_data or deltaCt

final_boxplot <- results_boxplot(data = deltaCt_results,
                by.group = TRUE,
                signif.show = FALSE,
                signif.dist = 1.05,
                faceting = FALSE,
                colors = c("#A0DEEE","#d1bbf9","#F0B0BC"),
                y.axis.title = "2^-Delta Ct")

final_boxplot
```
