[
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Date\n\n\n\nTitle\n\n\n\nAuthor\n\n\n\n\n\n\n\n\n07-24-2025\n\n\nqPCR Fold Change Analysis Using RQdeltaCT\n\n\nKatherine E. Dempsey\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Katherine E. Dempsey",
    "section": "",
    "text": "Hi! My name is Katherine, and I am a 2nd year PhD student at the University of Oklahoma Health Sciences Center.\n\n\nI am a member of the Singh Lab in the Department of Oncology Science, and my current research project focuses on how tumor cells reprogram stromal cell metabolism in pancreatic cancer.\n\n\n\nPrior to starting my PhD program, I earned my Bachelor’s degree in Biomedical Chemistry from Oral Roberts University, where I investigated the cytotoxic effects of 6-gingerol on colorectal cancer. I was also a Summer Undergraduate Research Fellow at UT Southwestern and was involved in validating a novel CRISPR-generated humanized PNPLA3 mouse model for studying non-alcoholic fatty liver disease."
  },
  {
    "objectID": "index.html#research-goals",
    "href": "index.html#research-goals",
    "title": "Katherine E. Dempsey",
    "section": "",
    "text": "I am a member of the Singh Lab in the Department of Oncology Science, and my current research project focuses on how tumor cells reprogram stromal cell metabolism in pancreatic cancer."
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Katherine E. Dempsey",
    "section": "",
    "text": "Prior to starting my PhD program, I earned my Bachelor’s degree in Biomedical Chemistry from Oral Roberts University, where I investigated the cytotoxic effects of 6-gingerol on colorectal cancer. I was also a Summer Undergraduate Research Fellow at UT Southwestern and was involved in validating a novel CRISPR-generated humanized PNPLA3 mouse model for studying non-alcoholic fatty liver disease."
  },
  {
    "objectID": "projects/RQdeltaCT_FinalProject/Final_Project.html",
    "href": "projects/RQdeltaCT_FinalProject/Final_Project.html",
    "title": "qPCR Fold Change Analysis Using RQdeltaCT",
    "section": "",
    "text": "The goal of this project was to develop a well-documented script that streamlines the process of calculating and visualizing gene expression fold changes from raw qPCR datasets, entirely within R. For the purposes of this example, I will be showing qPCR data generated by a summer intern in my lab. The experiment is looking at the expression of polyamine synthesis genes in samples obtained from KPC mice treated with two different doses of pentamidine, which inhibits the SAT1 gene.\n\n\n\n\n\nFigure 1: Overview of workflow for RQdeltaCT package\n\n\n\n\n\nYou can view the technical details about this package on CRAN or GitHub. Then follow the steps below to install and load the RQdeltaCT package. Follow the steps below to install from the CRAN repository.\n\ninstall.packages(\"RQdeltaCT\")\n\nSince you should already have already installed the devtools package for this class, you can also install RQdeltaCT directly from GitHub instead.\n\nremotes::install_github(\"Donadelnal/RQdeltaCT\")\n\nOnce you have installed RQdeltaCT, you can click here to learn more about what functions are included in this package.\n\n\n\nThis package includes built-in read_Ct_long() and read_Ct_wide() functions for importing data, but these only recognize .csv and .txt files. However, most qPCR machines export results as an Excel spreadsheet (.xls, .xlsx). Below is a way to directly import specific sheets from Excel without having to create a separate file.\n\n# The 'readxl' package allows you to open individual sheets from Excel without having to convert it into .csv or .txt format first\n\ninstall.packages(\"readxl\")\n\nYour raw data file will probably look something like the following:\n\n\n\nFigure 2: Example of raw qPCR data results\n\n\nAs you can see, this data needs quite a bit of tidying.\nThe first step is to import the sheet titled “Raw Data” from the Excel file using the readxl package. I also excluded the first 47 rows of irrelevant information pertaining to the qPCR instrument and protocol.\n\n# Load necessary packages\n\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(RQdeltaCT)\n\nraw_data &lt;- read_excel(\"qPCR_data.xls\", sheet = \"Results\", skip = 47)\n\nglimpse(raw_data)\n\nRows: 121\nColumns: 38\n$ Well                     &lt;chr&gt; \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"15…\n$ `Well Position`          &lt;chr&gt; \"G7\", \"G8\", \"G9\", \"G10\", \"G11\", \"G12\", \"G13\",…\n$ Omit                     &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n$ `Sample Name`            &lt;chr&gt; \"c1\", \"c1\", \"c1\", \"c2\", \"c2\", \"c2\", \"c3\", \"c3…\n$ `Target Name`            &lt;chr&gt; \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", \"18…\n$ Task                     &lt;chr&gt; \"UNKNOWN\", \"UNKNOWN\", \"UNKNOWN\", \"UNKNOWN\", \"…\n$ Reporter                 &lt;chr&gt; \"SYBR\", \"SYBR\", \"SYBR\", \"SYBR\", \"SYBR\", \"SYBR…\n$ Quencher                 &lt;chr&gt; \"None\", \"None\", \"None\", \"None\", \"None\", \"None…\n$ Quantity                 &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `Quantity Mean`          &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `Quantity SD`            &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ RQ                       &lt;dbl&gt; NA, 7.1089945, 7.1089945, 6.8644419, 6.864441…\n$ `RQ Min`                 &lt;dbl&gt; NA, 5.5418096, 5.5418096, 5.1459794, 5.145979…\n$ `RQ Max`                 &lt;dbl&gt; NA, 9.119368, 9.119368, 9.156772, 9.156772, 9…\n$ CT                       &lt;chr&gt; \"Undetermined\", \"11.990301132202148\", \"11.887…\n$ `Ct Mean`                &lt;dbl&gt; 11.93890, 11.93890, 11.93890, 11.89193, 11.89…\n$ `Ct SD`                  &lt;dbl&gt; 0.07269488, 0.07269488, 0.07269488, 0.0913456…\n$ `Delta Ct`               &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `Delta Ct Mean`          &lt;dbl&gt; NA, -14.87034, -14.87034, -14.81983, -14.8198…\n$ `Delta Ct SD`            &lt;dbl&gt; NA, 0.18866599, 0.18866599, 0.25932723, 0.259…\n$ `Delta Ct SE`            &lt;dbl&gt; NA, 0.11289690, 0.11289690, 0.14972264, 0.149…\n$ `Delta Delta Ct`         &lt;dbl&gt; NA, -2.8296454, -2.8296454, -2.7791424, -2.77…\n$ `Automatic Ct Threshold` &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRU…\n$ `Ct Threshold`           &lt;dbl&gt; 0.2658328, 0.2658328, 0.2658328, 0.2658328, 0…\n$ `Automatic Baseline`     &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRU…\n$ `Baseline Start`         &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, …\n$ `Baseline End`           &lt;dbl&gt; 39, 7, 6, 7, 7, 7, 7, 8, 7, 8, 7, 8, 8, 8, 8,…\n$ `Amp Status`             &lt;chr&gt; \"No Amp\", \"Amp\", \"Amp\", \"Amp\", \"Amp\", \"Amp\", …\n$ Comments                 &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `Cq Conf`                &lt;dbl&gt; 0.0000000, 0.9860583, 0.9873415, 0.9697938, 0…\n$ CQCONF                   &lt;chr&gt; \"Y\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", …\n$ EXPFAIL                  &lt;chr&gt; \"Y\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", …\n$ NOAMP                    &lt;chr&gt; \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", …\n$ Tm1                      &lt;dbl&gt; 84.77188, 83.41451, 83.39422, 83.39422, 83.50…\n$ HIGHSD                   &lt;chr&gt; \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", …\n$ Tm2                      &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Tm3                      &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Tm4                      &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n\n\nUsing dplyr, I selected only the columns required for calculations and filtered out rows containing the H2O no template controls.\n\nselect_data &lt;- raw_data |&gt;\n  select(`Sample Name`, `Target Name`, CT) |&gt;\n  filter(`Sample Name` != \"H2O\")\n\nglimpse(select_data)\n\nRows: 108\nColumns: 3\n$ `Sample Name` &lt;chr&gt; \"c1\", \"c1\", \"c1\", \"c2\", \"c2\", \"c2\", \"c3\", \"c3\", \"c3\", \"5…\n$ `Target Name` &lt;chr&gt; \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", …\n$ CT            &lt;chr&gt; \"Undetermined\", \"11.990301132202148\", \"11.88749504089355…\n\n\nThe RQdeltaCT package requires four columns of data: “Sample”, “Group”, “Gene”, and “Ct”. Therefore, it is necessary to re-name the column headings to ensure your data is recognized properly. I also had to add a “Group” column for grouping the biological replicates.\n\nclean_data &lt;- select_data |&gt;\n  rename(Sample = `Sample Name`, Gene = `Target Name`, Ct = CT) |&gt;\n  mutate(Group = case_when(\n    str_detect(Sample, \"c\") ~ \"Control\",\n    str_detect(Sample, \"5\") ~ \"5uM\",\n    str_detect(Sample, \"10\") ~ \"10uM\"))\n\nglimpse(clean_data)\n\nRows: 108\nColumns: 4\n$ Sample &lt;chr&gt; \"c1\", \"c1\", \"c1\", \"c2\", \"c2\", \"c2\", \"c3\", \"c3\", \"c3\", \"5_1\", \"5…\n$ Gene   &lt;chr&gt; \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", …\n$ Ct     &lt;chr&gt; \"Undetermined\", \"11.990301132202148\", \"11.887495040893555\", \"11…\n$ Group  &lt;chr&gt; \"Control\", \"Control\", \"Control\", \"Control\", \"Control\", \"Control…\n\n\nYou can also play around with sample data that is included with the package.\n\ndata(data.Ct)\nstr(data.Ct)\n\n'data.frame':   1288 obs. of  5 variables:\n $ Sample: chr  \"AAA1\" \"AAA10\" \"AAA12\" \"AAA13\" ...\n $ Gene  : chr  \"ANGPT1\" \"ANGPT1\" \"ANGPT1\" \"ANGPT1\" ...\n $ Ct    : chr  \"32.563\" \"34.648\" \"35.059\" \"37.135\" ...\n $ Group : chr  \"AAA\" \"AAA\" \"AAA\" \"AAA\" ...\n $ Flag  : chr  \"OK\" \"OK\" \"OK\" \"OK\" ...\n\n\n\n\nFirst, let’s generate a few quick graphs to help us visualize the proportion of unreliable Ct values by flagging values that were undetermined or above the set threshold.\n\n# Evaluate the quality of reads for each sample\n\nsample_quality &lt;- control_Ct_barplot_sample(data = clean_data,\n                                            flag.Ct = \"Undetermined\", \n                                            maxCt = 35)\n\n\n\n\n\n\n\n# View tibble\ntibble(sample_quality[[2]])\n\n# A tibble: 9 × 4\n  Sample Not.reliable Reliable Not.reliable.fraction\n  &lt;fct&gt;         &lt;int&gt;    &lt;int&gt;                 &lt;dbl&gt;\n1 c1                4        8                0.333 \n2 10_2              3        9                0.25  \n3 10_3              3        9                0.25  \n4 5_1               3        9                0.25  \n5 5_3               3        9                0.25  \n6 c2                3        9                0.25  \n7 5_2               2       10                0.167 \n8 c3                2       10                0.167 \n9 10_1              1       11                0.0833\n\n# Evaluate the quality of reads for each gene\n\ngene_quality &lt;- control_Ct_barplot_gene(data = clean_data,\n                                          flag.Ct = \"Undetermined\",\n                                          maxCt = 35,\n                                          axis.text.size = 6)\n\n\n\n\n\n\n\n# View tibble\nhead(gene_quality[[2]])\n\n# A tibble: 6 × 5\n  Gene  Group   Not.reliable Reliable Not.reliable.fraction\n  &lt;fct&gt; &lt;fct&gt;          &lt;int&gt;    &lt;int&gt;                 &lt;dbl&gt;\n1 Arg1  5uM                8        1                 0.889\n2 Arg1  Control            8        1                 0.889\n3 Arg1  10uM               7        2                 0.778\n4 18s   Control            1        8                 0.111\n5 18s   10uM               0        9                 0    \n6 Odc1  10uM               0        9                 0    \n\n\nGenes with consistently weak amplification can be an indicator of poor primer efficiency, meaning these primer pairs may need to be redesigned.\n\n\n\nNext, let’s filter out the genes that had at least 50% low quality reads.\n\nlow_quality_genes &lt;- filter(gene_quality[[2]], Not.reliable.fraction &gt; 0.5)$Gene\nlow_quality_genes &lt;- unique(as.vector(low_quality_genes))\nlow_quality_genes\n\n[1] \"Arg1\"\n\n# Exclude identified genes from data set for analysis\n\nquality_data &lt;- filter_Ct(data = clean_data,\n                           remove.Gene = low_quality_genes)\n\nFinally, we need to finish prepping data for analysis using the make_Ct_ready() function. Setting the argument imput.by.mean.within.groups to “TRUE” will collapse technical replicates by taking the average Ct values for each biological sample and remove any missing values.\n\nready_data &lt;- make_Ct_ready(data = quality_data,\n                            imput.by.mean.within.groups = TRUE)\n\nThe data contain 0 missing values that constitute 0 percent of the total data.\nMissing values were imputed using means within compared groups.\n\nready_data\n\n# A tibble: 9 × 5\n# Groups:   Group [3]\n  Group   Sample `18s`  Odc1  Sat1\n  &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 10uM    10_1    13.3  25.4  24.7\n2 10uM    10_2    11.4  24.4  24.5\n3 10uM    10_3    12.0  25.0  25.0\n4 5uM     5_1     12.8  26.0  27.1\n5 5uM     5_2     13.1  26.4  27.4\n6 5uM     5_3     13.2  24.9  26.1\n7 Control c1      11.9  26.8  26.1\n8 Control c2      11.9  26.7  25.7\n9 Control c3      12.3  27.0  26.3\n\n\n\n\n\n\nIf you are calculating 2-dCt, then set the transform argument to “TRUE”. Otherwise, set it equal to “FALSE” if you are using the 2-ddCt method.\n\n# ΔCt method\ndeltaCt_results &lt;- delta_Ct(data = ready_data,\n                            normalise = TRUE,\n                            ref = \"18s\",\n                            transform = TRUE)\ndeltaCt_results\n\n# A tibble: 9 × 4\n# Groups:   Group [3]\n  Group   Sample      Odc1      Sat1\n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt;     &lt;dbl&gt;\n1 10uM    10_1   0.000237  0.000371 \n2 10uM    10_2   0.000121  0.000117 \n3 10uM    10_3   0.000123  0.000120 \n4 5uM     5_1    0.000103  0.0000492\n5 5uM     5_2    0.000101  0.0000514\n6 5uM     5_3    0.000288  0.000124 \n7 Control c1     0.0000334 0.0000528\n8 Control c2     0.0000346 0.0000676\n9 Control c3     0.0000371 0.0000602\n\n# ΔΔCt method\n\ndeltaCt &lt;- delta_Ct(data = ready_data,\n                    normalise = TRUE,\n                    ref = \"18s\",\n                    transform = FALSE)\ndeltaCt\n\n# A tibble: 9 × 4\n# Groups:   Group [3]\n  Group   Sample  Odc1  Sat1\n  &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 10uM    10_1    12.0  11.4\n2 10uM    10_2    13.0  13.1\n3 10uM    10_3    13.0  13.0\n4 5uM     5_1     13.2  14.3\n5 5uM     5_2     13.3  14.2\n6 5uM     5_3     11.8  13.0\n7 Control c1      14.9  14.2\n8 Control c2      14.8  13.9\n9 Control c3      14.7  14.0\n\n\n\n\n\nThe RQ_ddCt() function calculates the relative fold change values along with statistical significance (either Student’s t test or Mann-Whitney U test is performed based on Shapiro-Wilk normality test). Therefore, the RQ_ddCt() function will need to be called for each group comparison you want to make, as specified by the group.study and group.ref arguments.\n\n# Sample size must be between 3 and 5000 for normality testing\n\nddCt_results_5uM &lt;- RQ_ddCt(deltaCt,\n                        group.study = \"5uM\",\n                        group.ref = \"Control\",\n                        do.tests = TRUE)\nglimpse(ddCt_results_5uM)\n\nRows: 2\nColumns: 16\nGroups: Gene [2]\n$ Gene           &lt;chr&gt; \"Odc1\", \"Sat1\"\n$ `5uM_mean`     &lt;dbl&gt; 12.75850, 13.84421\n$ Control_mean   &lt;dbl&gt; 14.80289, 14.02729\n$ `5uM_sd`       &lt;dbl&gt; 0.8645299, 0.7551560\n$ Control_sd     &lt;dbl&gt; 0.07732601, 0.17846670\n$ `5uM_norm_p`   &lt;dbl&gt; 0.03574696, 0.07928243\n$ Control_norm_p &lt;dbl&gt; 0.6353363, 0.9231704\n$ ddCt           &lt;dbl&gt; -2.0443874, -0.1830792\n$ FCh            &lt;dbl&gt; 4.124981, 1.135304\n$ log10FCh       &lt;dbl&gt; 0.61542193, 0.05511233\n$ t_test_p       &lt;dbl&gt; 0.05370094, 0.71884188\n$ t_test_stat    &lt;dbl&gt; -4.0795620, -0.4086593\n$ MW_test_p      &lt;pvalue&gt; 0.04953461, 0.51269076\n$ MW_test_stat   &lt;dbl&gt; -1.9639610, 0.6546537\n$ t_test_p_adj   &lt;dbl&gt; 0.1074019, 0.7188419\n$ MW_test_p_adj  &lt;dbl&gt; 0.09906923, 0.51269076\n\nddCt_results_10uM &lt;- RQ_ddCt(deltaCt,\n                        group.study = \"10uM\",\n                        group.ref = \"Control\",\n                        do.tests = TRUE)\nglimpse(ddCt_results_10uM)\n\nRows: 2\nColumns: 16\nGroups: Gene [2]\n$ Gene           &lt;chr&gt; \"Odc1\", \"Sat1\"\n$ `10uM_mean`    &lt;dbl&gt; 12.68422, 12.49364\n$ Control_mean   &lt;dbl&gt; 14.80289, 14.02729\n$ `10uM_sd`      &lt;dbl&gt; 0.5574356, 0.9489090\n$ Control_sd     &lt;dbl&gt; 0.07732601, 0.17846670\n$ `10uM_norm_p`  &lt;dbl&gt; 0.03972178, 0.04339291\n$ Control_norm_p &lt;dbl&gt; 0.6353363, 0.9231704\n$ ddCt           &lt;dbl&gt; -2.118665, -1.533652\n$ FCh            &lt;dbl&gt; 4.342920, 2.895179\n$ log10FCh       &lt;dbl&gt; 0.6377818, 0.4616754\n$ t_test_p       &lt;dbl&gt; 0.02064176, 0.10270610\n$ t_test_stat    &lt;dbl&gt; -6.520629, -2.751153\n$ MW_test_p      &lt;pvalue&gt; 0.04953461, 0.04953461\n$ MW_test_stat   &lt;dbl&gt; -1.963961, -1.963961\n$ t_test_p_adj   &lt;dbl&gt; 0.04128353, 0.10270610\n$ MW_test_p_adj  &lt;dbl&gt; 0.04953461, 0.04953461\n\n\n\n\n\n\n# Variant with p values depending on the normality of the data:\nlibrary(ggsignif)\nlibrary(cowplot)\n\n\n\n\nFC_plot_5uM &lt;- FCh_plot(data = ddCt_results_5uM,\n         use.p = TRUE,\n         mode = \"depends\",\n         p.threshold = 0.05,\n         use.FCh = TRUE,\n         signif.show = FALSE,\n         angle = 45,\n         colors = c(\"salmon\", \"royalblue\"))\n\n\n\n\n\n\n\nFC_plot_10uM &lt;- FCh_plot(data = ddCt_results_10uM,\n         use.p = TRUE,\n         mode = \"depends\",\n         p.threshold = 0.05,\n         use.FCh = TRUE,\n         signif.show = FALSE,\n         angle = 45,\n         colors = c(\"salmon\", \"royalblue\"))\n\n\n\n\n\n\n\n# Store calculations in data frame\n\nFC_table_5uM &lt;- as.data.frame(FC_plot_5uM[2])\nFC_table_10uM &lt;- as.data.frame(FC_plot_10uM[2])\n\n# Select values to view\n\nFC_table_5uM |&gt;\n  select(Gene, ddCt, FCh, log10FCh, p.used)\n\n  Gene       ddCt      FCh   log10FCh     p.used\n1 Odc1 -2.0443874 4.124981 0.61542193 0.04953461\n2 Sat1 -0.1830792 1.135304 0.05511233 0.71884188\n\nFC_table_10uM |&gt;\n  select(Gene, ddCt, FCh, log10FCh, p.used)\n\n  Gene      ddCt      FCh  log10FCh     p.used\n1 Odc1 -2.118665 4.342920 0.6377818 0.04953461\n2 Sat1 -1.533652 2.895179 0.4616754 0.04953461\n\n\nWhen you are evaluating a big group of genes, fold change plots can be useful for quickly telling which ones have upregulated vs downregulated expression. Here is an example from another one of my datasets with more genes.\n\n\n\nFigure 3: Another fold change plot example\n\n\n\n\n\n\n# Use ready_data or deltaCt\n\nfinal_boxplot &lt;- results_boxplot(data = deltaCt_results,\n                by.group = TRUE,\n                signif.show = FALSE,\n                signif.dist = 1.05,\n                faceting = FALSE,\n                colors = c(\"#A0DEEE\",\"#d1bbf9\",\"#F0B0BC\"),\n                y.axis.title = \"2^-Delta Ct\")\n\n\n\n\n\n\n\nfinal_boxplot"
  },
  {
    "objectID": "projects/RQdeltaCT_FinalProject/Final_Project.html#workflow",
    "href": "projects/RQdeltaCT_FinalProject/Final_Project.html#workflow",
    "title": "qPCR Fold Change Analysis Using RQdeltaCT",
    "section": "",
    "text": "Figure 1: Overview of workflow for RQdeltaCT package"
  },
  {
    "objectID": "projects/RQdeltaCT_FinalProject/Final_Project.html#installing-package",
    "href": "projects/RQdeltaCT_FinalProject/Final_Project.html#installing-package",
    "title": "qPCR Fold Change Analysis Using RQdeltaCT",
    "section": "",
    "text": "You can view the technical details about this package on CRAN or GitHub. Then follow the steps below to install and load the RQdeltaCT package. Follow the steps below to install from the CRAN repository.\n\ninstall.packages(\"RQdeltaCT\")\n\nSince you should already have already installed the devtools package for this class, you can also install RQdeltaCT directly from GitHub instead.\n\nremotes::install_github(\"Donadelnal/RQdeltaCT\")\n\nOnce you have installed RQdeltaCT, you can click here to learn more about what functions are included in this package."
  },
  {
    "objectID": "projects/RQdeltaCT_FinalProject/Final_Project.html#importing-tidying-data",
    "href": "projects/RQdeltaCT_FinalProject/Final_Project.html#importing-tidying-data",
    "title": "qPCR Fold Change Analysis Using RQdeltaCT",
    "section": "",
    "text": "This package includes built-in read_Ct_long() and read_Ct_wide() functions for importing data, but these only recognize .csv and .txt files. However, most qPCR machines export results as an Excel spreadsheet (.xls, .xlsx). Below is a way to directly import specific sheets from Excel without having to create a separate file.\n\n# The 'readxl' package allows you to open individual sheets from Excel without having to convert it into .csv or .txt format first\n\ninstall.packages(\"readxl\")\n\nYour raw data file will probably look something like the following:\n\n\n\nFigure 2: Example of raw qPCR data results\n\n\nAs you can see, this data needs quite a bit of tidying.\nThe first step is to import the sheet titled “Raw Data” from the Excel file using the readxl package. I also excluded the first 47 rows of irrelevant information pertaining to the qPCR instrument and protocol.\n\n# Load necessary packages\n\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(RQdeltaCT)\n\nraw_data &lt;- read_excel(\"qPCR_data.xls\", sheet = \"Results\", skip = 47)\n\nglimpse(raw_data)\n\nRows: 121\nColumns: 38\n$ Well                     &lt;chr&gt; \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"15…\n$ `Well Position`          &lt;chr&gt; \"G7\", \"G8\", \"G9\", \"G10\", \"G11\", \"G12\", \"G13\",…\n$ Omit                     &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n$ `Sample Name`            &lt;chr&gt; \"c1\", \"c1\", \"c1\", \"c2\", \"c2\", \"c2\", \"c3\", \"c3…\n$ `Target Name`            &lt;chr&gt; \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", \"18…\n$ Task                     &lt;chr&gt; \"UNKNOWN\", \"UNKNOWN\", \"UNKNOWN\", \"UNKNOWN\", \"…\n$ Reporter                 &lt;chr&gt; \"SYBR\", \"SYBR\", \"SYBR\", \"SYBR\", \"SYBR\", \"SYBR…\n$ Quencher                 &lt;chr&gt; \"None\", \"None\", \"None\", \"None\", \"None\", \"None…\n$ Quantity                 &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `Quantity Mean`          &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `Quantity SD`            &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ RQ                       &lt;dbl&gt; NA, 7.1089945, 7.1089945, 6.8644419, 6.864441…\n$ `RQ Min`                 &lt;dbl&gt; NA, 5.5418096, 5.5418096, 5.1459794, 5.145979…\n$ `RQ Max`                 &lt;dbl&gt; NA, 9.119368, 9.119368, 9.156772, 9.156772, 9…\n$ CT                       &lt;chr&gt; \"Undetermined\", \"11.990301132202148\", \"11.887…\n$ `Ct Mean`                &lt;dbl&gt; 11.93890, 11.93890, 11.93890, 11.89193, 11.89…\n$ `Ct SD`                  &lt;dbl&gt; 0.07269488, 0.07269488, 0.07269488, 0.0913456…\n$ `Delta Ct`               &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `Delta Ct Mean`          &lt;dbl&gt; NA, -14.87034, -14.87034, -14.81983, -14.8198…\n$ `Delta Ct SD`            &lt;dbl&gt; NA, 0.18866599, 0.18866599, 0.25932723, 0.259…\n$ `Delta Ct SE`            &lt;dbl&gt; NA, 0.11289690, 0.11289690, 0.14972264, 0.149…\n$ `Delta Delta Ct`         &lt;dbl&gt; NA, -2.8296454, -2.8296454, -2.7791424, -2.77…\n$ `Automatic Ct Threshold` &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRU…\n$ `Ct Threshold`           &lt;dbl&gt; 0.2658328, 0.2658328, 0.2658328, 0.2658328, 0…\n$ `Automatic Baseline`     &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRU…\n$ `Baseline Start`         &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, …\n$ `Baseline End`           &lt;dbl&gt; 39, 7, 6, 7, 7, 7, 7, 8, 7, 8, 7, 8, 8, 8, 8,…\n$ `Amp Status`             &lt;chr&gt; \"No Amp\", \"Amp\", \"Amp\", \"Amp\", \"Amp\", \"Amp\", …\n$ Comments                 &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `Cq Conf`                &lt;dbl&gt; 0.0000000, 0.9860583, 0.9873415, 0.9697938, 0…\n$ CQCONF                   &lt;chr&gt; \"Y\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", …\n$ EXPFAIL                  &lt;chr&gt; \"Y\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", …\n$ NOAMP                    &lt;chr&gt; \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", …\n$ Tm1                      &lt;dbl&gt; 84.77188, 83.41451, 83.39422, 83.39422, 83.50…\n$ HIGHSD                   &lt;chr&gt; \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", …\n$ Tm2                      &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Tm3                      &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Tm4                      &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n\n\nUsing dplyr, I selected only the columns required for calculations and filtered out rows containing the H2O no template controls.\n\nselect_data &lt;- raw_data |&gt;\n  select(`Sample Name`, `Target Name`, CT) |&gt;\n  filter(`Sample Name` != \"H2O\")\n\nglimpse(select_data)\n\nRows: 108\nColumns: 3\n$ `Sample Name` &lt;chr&gt; \"c1\", \"c1\", \"c1\", \"c2\", \"c2\", \"c2\", \"c3\", \"c3\", \"c3\", \"5…\n$ `Target Name` &lt;chr&gt; \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", …\n$ CT            &lt;chr&gt; \"Undetermined\", \"11.990301132202148\", \"11.88749504089355…\n\n\nThe RQdeltaCT package requires four columns of data: “Sample”, “Group”, “Gene”, and “Ct”. Therefore, it is necessary to re-name the column headings to ensure your data is recognized properly. I also had to add a “Group” column for grouping the biological replicates.\n\nclean_data &lt;- select_data |&gt;\n  rename(Sample = `Sample Name`, Gene = `Target Name`, Ct = CT) |&gt;\n  mutate(Group = case_when(\n    str_detect(Sample, \"c\") ~ \"Control\",\n    str_detect(Sample, \"5\") ~ \"5uM\",\n    str_detect(Sample, \"10\") ~ \"10uM\"))\n\nglimpse(clean_data)\n\nRows: 108\nColumns: 4\n$ Sample &lt;chr&gt; \"c1\", \"c1\", \"c1\", \"c2\", \"c2\", \"c2\", \"c3\", \"c3\", \"c3\", \"5_1\", \"5…\n$ Gene   &lt;chr&gt; \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", \"18s\", …\n$ Ct     &lt;chr&gt; \"Undetermined\", \"11.990301132202148\", \"11.887495040893555\", \"11…\n$ Group  &lt;chr&gt; \"Control\", \"Control\", \"Control\", \"Control\", \"Control\", \"Control…\n\n\nYou can also play around with sample data that is included with the package.\n\ndata(data.Ct)\nstr(data.Ct)\n\n'data.frame':   1288 obs. of  5 variables:\n $ Sample: chr  \"AAA1\" \"AAA10\" \"AAA12\" \"AAA13\" ...\n $ Gene  : chr  \"ANGPT1\" \"ANGPT1\" \"ANGPT1\" \"ANGPT1\" ...\n $ Ct    : chr  \"32.563\" \"34.648\" \"35.059\" \"37.135\" ...\n $ Group : chr  \"AAA\" \"AAA\" \"AAA\" \"AAA\" ...\n $ Flag  : chr  \"OK\" \"OK\" \"OK\" \"OK\" ...\n\n\n\n\nFirst, let’s generate a few quick graphs to help us visualize the proportion of unreliable Ct values by flagging values that were undetermined or above the set threshold.\n\n# Evaluate the quality of reads for each sample\n\nsample_quality &lt;- control_Ct_barplot_sample(data = clean_data,\n                                            flag.Ct = \"Undetermined\", \n                                            maxCt = 35)\n\n\n\n\n\n\n\n# View tibble\ntibble(sample_quality[[2]])\n\n# A tibble: 9 × 4\n  Sample Not.reliable Reliable Not.reliable.fraction\n  &lt;fct&gt;         &lt;int&gt;    &lt;int&gt;                 &lt;dbl&gt;\n1 c1                4        8                0.333 \n2 10_2              3        9                0.25  \n3 10_3              3        9                0.25  \n4 5_1               3        9                0.25  \n5 5_3               3        9                0.25  \n6 c2                3        9                0.25  \n7 5_2               2       10                0.167 \n8 c3                2       10                0.167 \n9 10_1              1       11                0.0833\n\n# Evaluate the quality of reads for each gene\n\ngene_quality &lt;- control_Ct_barplot_gene(data = clean_data,\n                                          flag.Ct = \"Undetermined\",\n                                          maxCt = 35,\n                                          axis.text.size = 6)\n\n\n\n\n\n\n\n# View tibble\nhead(gene_quality[[2]])\n\n# A tibble: 6 × 5\n  Gene  Group   Not.reliable Reliable Not.reliable.fraction\n  &lt;fct&gt; &lt;fct&gt;          &lt;int&gt;    &lt;int&gt;                 &lt;dbl&gt;\n1 Arg1  5uM                8        1                 0.889\n2 Arg1  Control            8        1                 0.889\n3 Arg1  10uM               7        2                 0.778\n4 18s   Control            1        8                 0.111\n5 18s   10uM               0        9                 0    \n6 Odc1  10uM               0        9                 0    \n\n\nGenes with consistently weak amplification can be an indicator of poor primer efficiency, meaning these primer pairs may need to be redesigned.\n\n\n\nNext, let’s filter out the genes that had at least 50% low quality reads.\n\nlow_quality_genes &lt;- filter(gene_quality[[2]], Not.reliable.fraction &gt; 0.5)$Gene\nlow_quality_genes &lt;- unique(as.vector(low_quality_genes))\nlow_quality_genes\n\n[1] \"Arg1\"\n\n# Exclude identified genes from data set for analysis\n\nquality_data &lt;- filter_Ct(data = clean_data,\n                           remove.Gene = low_quality_genes)\n\nFinally, we need to finish prepping data for analysis using the make_Ct_ready() function. Setting the argument imput.by.mean.within.groups to “TRUE” will collapse technical replicates by taking the average Ct values for each biological sample and remove any missing values.\n\nready_data &lt;- make_Ct_ready(data = quality_data,\n                            imput.by.mean.within.groups = TRUE)\n\nThe data contain 0 missing values that constitute 0 percent of the total data.\nMissing values were imputed using means within compared groups.\n\nready_data\n\n# A tibble: 9 × 5\n# Groups:   Group [3]\n  Group   Sample `18s`  Odc1  Sat1\n  &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 10uM    10_1    13.3  25.4  24.7\n2 10uM    10_2    11.4  24.4  24.5\n3 10uM    10_3    12.0  25.0  25.0\n4 5uM     5_1     12.8  26.0  27.1\n5 5uM     5_2     13.1  26.4  27.4\n6 5uM     5_3     13.2  24.9  26.1\n7 Control c1      11.9  26.8  26.1\n8 Control c2      11.9  26.7  25.7\n9 Control c3      12.3  27.0  26.3"
  },
  {
    "objectID": "projects/RQdeltaCT_FinalProject/Final_Project.html#normalizing-data-to-reference-gene-δct",
    "href": "projects/RQdeltaCT_FinalProject/Final_Project.html#normalizing-data-to-reference-gene-δct",
    "title": "qPCR Fold Change Analysis Using RQdeltaCT",
    "section": "",
    "text": "If you are calculating 2-dCt, then set the transform argument to “TRUE”. Otherwise, set it equal to “FALSE” if you are using the 2-ddCt method.\n\n# ΔCt method\ndeltaCt_results &lt;- delta_Ct(data = ready_data,\n                            normalise = TRUE,\n                            ref = \"18s\",\n                            transform = TRUE)\ndeltaCt_results\n\n# A tibble: 9 × 4\n# Groups:   Group [3]\n  Group   Sample      Odc1      Sat1\n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt;     &lt;dbl&gt;\n1 10uM    10_1   0.000237  0.000371 \n2 10uM    10_2   0.000121  0.000117 \n3 10uM    10_3   0.000123  0.000120 \n4 5uM     5_1    0.000103  0.0000492\n5 5uM     5_2    0.000101  0.0000514\n6 5uM     5_3    0.000288  0.000124 \n7 Control c1     0.0000334 0.0000528\n8 Control c2     0.0000346 0.0000676\n9 Control c3     0.0000371 0.0000602\n\n# ΔΔCt method\n\ndeltaCt &lt;- delta_Ct(data = ready_data,\n                    normalise = TRUE,\n                    ref = \"18s\",\n                    transform = FALSE)\ndeltaCt\n\n# A tibble: 9 × 4\n# Groups:   Group [3]\n  Group   Sample  Odc1  Sat1\n  &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 10uM    10_1    12.0  11.4\n2 10uM    10_2    13.0  13.1\n3 10uM    10_3    13.0  13.0\n4 5uM     5_1     13.2  14.3\n5 5uM     5_2     13.3  14.2\n6 5uM     5_3     11.8  13.0\n7 Control c1      14.9  14.2\n8 Control c2      14.8  13.9\n9 Control c3      14.7  14.0"
  },
  {
    "objectID": "projects/RQdeltaCT_FinalProject/Final_Project.html#relative-quantification-δδct",
    "href": "projects/RQdeltaCT_FinalProject/Final_Project.html#relative-quantification-δδct",
    "title": "qPCR Fold Change Analysis Using RQdeltaCT",
    "section": "",
    "text": "The RQ_ddCt() function calculates the relative fold change values along with statistical significance (either Student’s t test or Mann-Whitney U test is performed based on Shapiro-Wilk normality test). Therefore, the RQ_ddCt() function will need to be called for each group comparison you want to make, as specified by the group.study and group.ref arguments.\n\n# Sample size must be between 3 and 5000 for normality testing\n\nddCt_results_5uM &lt;- RQ_ddCt(deltaCt,\n                        group.study = \"5uM\",\n                        group.ref = \"Control\",\n                        do.tests = TRUE)\nglimpse(ddCt_results_5uM)\n\nRows: 2\nColumns: 16\nGroups: Gene [2]\n$ Gene           &lt;chr&gt; \"Odc1\", \"Sat1\"\n$ `5uM_mean`     &lt;dbl&gt; 12.75850, 13.84421\n$ Control_mean   &lt;dbl&gt; 14.80289, 14.02729\n$ `5uM_sd`       &lt;dbl&gt; 0.8645299, 0.7551560\n$ Control_sd     &lt;dbl&gt; 0.07732601, 0.17846670\n$ `5uM_norm_p`   &lt;dbl&gt; 0.03574696, 0.07928243\n$ Control_norm_p &lt;dbl&gt; 0.6353363, 0.9231704\n$ ddCt           &lt;dbl&gt; -2.0443874, -0.1830792\n$ FCh            &lt;dbl&gt; 4.124981, 1.135304\n$ log10FCh       &lt;dbl&gt; 0.61542193, 0.05511233\n$ t_test_p       &lt;dbl&gt; 0.05370094, 0.71884188\n$ t_test_stat    &lt;dbl&gt; -4.0795620, -0.4086593\n$ MW_test_p      &lt;pvalue&gt; 0.04953461, 0.51269076\n$ MW_test_stat   &lt;dbl&gt; -1.9639610, 0.6546537\n$ t_test_p_adj   &lt;dbl&gt; 0.1074019, 0.7188419\n$ MW_test_p_adj  &lt;dbl&gt; 0.09906923, 0.51269076\n\nddCt_results_10uM &lt;- RQ_ddCt(deltaCt,\n                        group.study = \"10uM\",\n                        group.ref = \"Control\",\n                        do.tests = TRUE)\nglimpse(ddCt_results_10uM)\n\nRows: 2\nColumns: 16\nGroups: Gene [2]\n$ Gene           &lt;chr&gt; \"Odc1\", \"Sat1\"\n$ `10uM_mean`    &lt;dbl&gt; 12.68422, 12.49364\n$ Control_mean   &lt;dbl&gt; 14.80289, 14.02729\n$ `10uM_sd`      &lt;dbl&gt; 0.5574356, 0.9489090\n$ Control_sd     &lt;dbl&gt; 0.07732601, 0.17846670\n$ `10uM_norm_p`  &lt;dbl&gt; 0.03972178, 0.04339291\n$ Control_norm_p &lt;dbl&gt; 0.6353363, 0.9231704\n$ ddCt           &lt;dbl&gt; -2.118665, -1.533652\n$ FCh            &lt;dbl&gt; 4.342920, 2.895179\n$ log10FCh       &lt;dbl&gt; 0.6377818, 0.4616754\n$ t_test_p       &lt;dbl&gt; 0.02064176, 0.10270610\n$ t_test_stat    &lt;dbl&gt; -6.520629, -2.751153\n$ MW_test_p      &lt;pvalue&gt; 0.04953461, 0.04953461\n$ MW_test_stat   &lt;dbl&gt; -1.963961, -1.963961\n$ t_test_p_adj   &lt;dbl&gt; 0.04128353, 0.10270610\n$ MW_test_p_adj  &lt;dbl&gt; 0.04953461, 0.04953461"
  },
  {
    "objectID": "projects/RQdeltaCT_FinalProject/Final_Project.html#visualization",
    "href": "projects/RQdeltaCT_FinalProject/Final_Project.html#visualization",
    "title": "qPCR Fold Change Analysis Using RQdeltaCT",
    "section": "",
    "text": "# Variant with p values depending on the normality of the data:\nlibrary(ggsignif)\nlibrary(cowplot)\n\n\n\n\nFC_plot_5uM &lt;- FCh_plot(data = ddCt_results_5uM,\n         use.p = TRUE,\n         mode = \"depends\",\n         p.threshold = 0.05,\n         use.FCh = TRUE,\n         signif.show = FALSE,\n         angle = 45,\n         colors = c(\"salmon\", \"royalblue\"))\n\n\n\n\n\n\n\nFC_plot_10uM &lt;- FCh_plot(data = ddCt_results_10uM,\n         use.p = TRUE,\n         mode = \"depends\",\n         p.threshold = 0.05,\n         use.FCh = TRUE,\n         signif.show = FALSE,\n         angle = 45,\n         colors = c(\"salmon\", \"royalblue\"))\n\n\n\n\n\n\n\n# Store calculations in data frame\n\nFC_table_5uM &lt;- as.data.frame(FC_plot_5uM[2])\nFC_table_10uM &lt;- as.data.frame(FC_plot_10uM[2])\n\n# Select values to view\n\nFC_table_5uM |&gt;\n  select(Gene, ddCt, FCh, log10FCh, p.used)\n\n  Gene       ddCt      FCh   log10FCh     p.used\n1 Odc1 -2.0443874 4.124981 0.61542193 0.04953461\n2 Sat1 -0.1830792 1.135304 0.05511233 0.71884188\n\nFC_table_10uM |&gt;\n  select(Gene, ddCt, FCh, log10FCh, p.used)\n\n  Gene      ddCt      FCh  log10FCh     p.used\n1 Odc1 -2.118665 4.342920 0.6377818 0.04953461\n2 Sat1 -1.533652 2.895179 0.4616754 0.04953461\n\n\nWhen you are evaluating a big group of genes, fold change plots can be useful for quickly telling which ones have upregulated vs downregulated expression. Here is an example from another one of my datasets with more genes.\n\n\n\nFigure 3: Another fold change plot example\n\n\n\n\n\n\n# Use ready_data or deltaCt\n\nfinal_boxplot &lt;- results_boxplot(data = deltaCt_results,\n                by.group = TRUE,\n                signif.show = FALSE,\n                signif.dist = 1.05,\n                faceting = FALSE,\n                colors = c(\"#A0DEEE\",\"#d1bbf9\",\"#F0B0BC\"),\n                y.axis.title = \"2^-Delta Ct\")\n\n\n\n\n\n\n\nfinal_boxplot"
  }
]